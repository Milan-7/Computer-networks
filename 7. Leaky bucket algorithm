// CPP program for leaky bucket

#include<iostream>
using namespace std;

int main(){
    int no_of_queries = 4;
    int bucket_size = 10;
    int input_packet_size;
    int output_packet_size = 1;
    int stored_buffer_size = 0;
    int size_left;

    for(int i=0; i<no_of_queries; i++){
        
        cout<<"Input Packet Size: ";
        cin>>input_packet_size;
        
        size_left = bucket_size - stored_buffer_size;
        if (input_packet_size<=size_left){
            stored_buffer_size+=input_packet_size;
        }
        else{
            cout << "Packet Dropped" <<endl;
        }
        cout << "Stored Buffer Size: " << stored_buffer_size <<endl;
        stored_buffer_size -= output_packet_size;
    }
    return 0;
}

****************************************************************************************************************************
// CPP program for token bucket
#include <iostream>
#include <queue>
using namespace std;

const int BUCKET_SIZE = 5;
const int TOKEN_RATE = 2;

void produceToken(int &tokenCount)
{
    if (tokenCount + TOKEN_RATE <= BUCKET_SIZE)
    {
        tokenCount += TOKEN_RATE;
    }
    else
    {
        tokenCount = BUCKET_SIZE;
    }
}

int main()
{
    queue<int> packets;
    int tokenCount = BUCKET_SIZE;
    int i = 0;
    while (i != 25)
    {
        produceToken(tokenCount);
        int packetSize = rand() % 10;
        if (packetSize <= tokenCount)
        {
            packets.push(packetSize);
            tokenCount -= packetSize;
            cout << "Packet of size " << packetSize << " added to queue" << endl;
        }
        else
        {
            cout << "Packet of size " << packetSize << " discarded due to lack of tokens" << endl;
        }
        cout << "Token count: " << tokenCount << std::endl;
        cout << "Queue size: " << packets.size() << endl;
        cout << "\n";
        i++;
    }
    return 0;
}
